# -*- coding: utf-8 -*-
"""AniGAN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IjpEdqS4p6iHJMFvl-sHWCv7XVnvEO9K

# Build api
"""

from huggingface_hub import notebook_login

def main():
    notebook_login()
    # Your application logic here
    print("Successfully logged in to Hugging Face Hub")

if __name__ == "__main__":
    main()

# from google.colab import drive
# drive.mount('/content/drive')

from fastapi import FastAPI, File, UploadFile
from fastapi.responses import FileResponse
import uuid
from pydantic import BaseModel
import json
import uvicorn
from fastapi.middleware.cors import CORSMiddleware
import nest_asyncio
# from drive.MyDrive.AniGAN.test import main

from PIL import Image
import torch

model0 = torch.hub.load("AK391/animegan2-pytorch:main", "generator", pretrained="face_paint_512_v2",  device="cuda")
model1 = torch.hub.load("AK391/animegan2-pytorch:main", "generator", pretrained="face_paint_512_v1",  device = "cuda")
model2 = torch.hub.load("bryandlee/animegan2-pytorch:main", "generator", pretrained="paprika",  device="cuda")
model3 = torch.hub.load("bryandlee/animegan2-pytorch:main", "generator", pretrained="celeba_distill",  device="cuda")
face2paint = torch.hub.load(
    'AK391/animegan2-pytorch:main', 'face2paint',
    size=512, device="cuda",side_by_side=False
)

#@title Face Detector & FFHQ-style Alignment

# https://github.com/woctezuma/stylegan2-projecting-images

import os
import dlib
import collections
from typing import Union, List
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
import subprocess

def get_dlib_face_detector(predictor_path: str = "shape_predictor_68_face_landmarks.dat"):

    if not os.path.isfile(predictor_path):
        model_file = "shape_predictor_68_face_landmarks.dat.bz2"
        os.system(f"wget http://dlib.net/files/{model_file}")
        os.system(f"bzip2 -dk {model_file}")

    detector = dlib.get_frontal_face_detector()
    shape_predictor = dlib.shape_predictor(predictor_path)

    def detect_face_landmarks(img: Union[Image.Image, np.ndarray]):
        if isinstance(img, Image.Image):
            img = np.array(img)
        faces = []
        dets = detector(img)
        for d in dets:
            shape = shape_predictor(img, d)
            faces.append(np.array([[v.x, v.y] for v in shape.parts()]))
        return faces

    return detect_face_landmarks


def display_facial_landmarks(
    img: Image,
    landmarks: List[np.ndarray],
    fig_size=[15, 15]
):
    plot_style = dict(
        marker='o',
        markersize=4,
        linestyle='-',
        lw=2
    )
    pred_type = collections.namedtuple('prediction_type', ['slice', 'color'])
    pred_types = {
        'face': pred_type(slice(0, 17), (0.682, 0.780, 0.909, 0.5)),
        'eyebrow1': pred_type(slice(17, 22), (1.0, 0.498, 0.055, 0.4)),
        'eyebrow2': pred_type(slice(22, 27), (1.0, 0.498, 0.055, 0.4)),
        'nose': pred_type(slice(27, 31), (0.345, 0.239, 0.443, 0.4)),
        'nostril': pred_type(slice(31, 36), (0.345, 0.239, 0.443, 0.4)),
        'eye1': pred_type(slice(36, 42), (0.596, 0.875, 0.541, 0.3)),
        'eye2': pred_type(slice(42, 48), (0.596, 0.875, 0.541, 0.3)),
        'lips': pred_type(slice(48, 60), (0.596, 0.875, 0.541, 0.3)),
        'teeth': pred_type(slice(60, 68), (0.596, 0.875, 0.541, 0.4))
    }

    fig = plt.figure(figsize=fig_size)
    ax = fig.add_subplot(1, 1, 1)
    ax.imshow(img)
    ax.axis('off')

    for face in landmarks:
        for pred_type in pred_types.values():
            ax.plot(
                face[pred_type.slice, 0],
                face[pred_type.slice, 1],
                color=pred_type.color, **plot_style
            )
    plt.show()



# https://github.com/NVlabs/ffhq-dataset/blob/master/download_ffhq.py

import PIL.Image
import PIL.ImageFile
import numpy as np
import scipy.ndimage


def align_and_crop_face(
    img: Image.Image,
    landmarks: np.ndarray,
    expand: float = 1.0,
    output_size: int = 1024,
    transform_size: int = 4096,
    enable_padding: bool = True,
):
    # Parse landmarks.
    # pylint: disable=unused-variable
    lm = landmarks
    lm_chin          = lm[0  : 17]  # left-right
    lm_eyebrow_left  = lm[17 : 22]  # left-right
    lm_eyebrow_right = lm[22 : 27]  # left-right
    lm_nose          = lm[27 : 31]  # top-down
    lm_nostrils      = lm[31 : 36]  # top-down
    lm_eye_left      = lm[36 : 42]  # left-clockwise
    lm_eye_right     = lm[42 : 48]  # left-clockwise
    lm_mouth_outer   = lm[48 : 60]  # left-clockwise
    lm_mouth_inner   = lm[60 : 68]  # left-clockwise

    # Calculate auxiliary vectors.
    eye_left     = np.mean(lm_eye_left, axis=0)
    eye_right    = np.mean(lm_eye_right, axis=0)
    eye_avg      = (eye_left + eye_right) * 0.5
    eye_to_eye   = eye_right - eye_left
    mouth_left   = lm_mouth_outer[0]
    mouth_right  = lm_mouth_outer[6]
    mouth_avg    = (mouth_left + mouth_right) * 0.5
    eye_to_mouth = mouth_avg - eye_avg

    # Choose oriented crop rectangle.
    x = eye_to_eye - np.flipud(eye_to_mouth) * [-1, 1]
    x /= np.hypot(*x)
    x *= max(np.hypot(*eye_to_eye) * 2.0, np.hypot(*eye_to_mouth) * 1.8)
    x *= expand
    y = np.flipud(x) * [-1, 1]
    c = eye_avg + eye_to_mouth * 0.1
    quad = np.stack([c - x - y, c - x + y, c + x + y, c + x - y])
    qsize = np.hypot(*x) * 2

    # Shrink.
    shrink = int(np.floor(qsize / output_size * 0.5))
    if shrink > 1:
        rsize = (int(np.rint(float(img.size[0]) / shrink)), int(np.rint(float(img.size[1]) / shrink)))
        img = img.resize(rsize, PIL.Image.ANTIALIAS)
        quad /= shrink
        qsize /= shrink

    # Crop.
    border = max(int(np.rint(qsize * 0.1)), 3)
    crop = (int(np.floor(min(quad[:,0]))), int(np.floor(min(quad[:,1]))), int(np.ceil(max(quad[:,0]))), int(np.ceil(max(quad[:,1]))))
    crop = (max(crop[0] - border, 0), max(crop[1] - border, 0), min(crop[2] + border, img.size[0]), min(crop[3] + border, img.size[1]))
    if crop[2] - crop[0] < img.size[0] or crop[3] - crop[1] < img.size[1]:
        img = img.crop(crop)
        quad -= crop[0:2]

    # Pad.
    pad = (int(np.floor(min(quad[:,0]))), int(np.floor(min(quad[:,1]))), int(np.ceil(max(quad[:,0]))), int(np.ceil(max(quad[:,1]))))
    pad = (max(-pad[0] + border, 0), max(-pad[1] + border, 0), max(pad[2] - img.size[0] + border, 0), max(pad[3] - img.size[1] + border, 0))
    if enable_padding and max(pad) > border - 4:
        pad = np.maximum(pad, int(np.rint(qsize * 0.3)))
        img = np.pad(np.float32(img), ((pad[1], pad[3]), (pad[0], pad[2]), (0, 0)), 'reflect')
        h, w, _ = img.shape
        y, x, _ = np.ogrid[:h, :w, :1]
        mask = np.maximum(1.0 - np.minimum(np.float32(x) / pad[0], np.float32(w-1-x) / pad[2]), 1.0 - np.minimum(np.float32(y) / pad[1], np.float32(h-1-y) / pad[3]))
        blur = qsize * 0.02
        img += (scipy.ndimage.gaussian_filter(img, [blur, blur, 0]) - img) * np.clip(mask * 3.0 + 1.0, 0.0, 1.0)
        img += (np.median(img, axis=(0,1)) - img) * np.clip(mask, 0.0, 1.0)
        img = PIL.Image.fromarray(np.uint8(np.clip(np.rint(img), 0, 255)), 'RGB')
        quad += pad[:2]

    # Transform.
    img = img.transform((transform_size, transform_size), PIL.Image.QUAD, (quad + 0.5).flatten(), PIL.Image.BILINEAR)
    if output_size < transform_size:
        img = img.resize((output_size, output_size), PIL.Image.ANTIALIAS)

    return img

from PIL import Image
from io import BytesIO

def rotate_jpg(image_path, degrees):


  # Open the image.
  image = Image.open(image_path)

  # Rotate the image.
  image = image.rotate(degrees)

  # Save the image to a buffer.
  buffer = BytesIO()
  image.save(buffer, format='JPEG')

  # Return the rotated image.
  return buffer.getvalue()

app = FastAPI()

origins = ["*"]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

class AniGANRequest(BaseModel):
  sourceImg: str = ""
  referenceImg: int = 0

class DownloadRequest(BaseModel):
  url: str = ""

@app.post('/transform')
async def AniGAN(req: AniGANRequest):

  filePath = ""

  tmp = req.sourceImg
  listModel = [model0, model1, model2, model3]
  for i in range(0,4):
    face_detector = get_dlib_face_detector()
    img = Image.open(tmp).convert("RGB")
    landmarks = face_detector(img)
    # display_facial_landmarks(img, landmarks, fig_size=[5, 5])
    if len(landmarks) == 0:
      rotated_image = rotate_jpg(tmp, 90)
      with open('rotated_image.jpg', 'wb') as f:
        f.write(rotated_image)
      tmp =  'rotated_image.jpg'
      continue
    else:
      isGood = 0
      count = 0
      expand = 1.35
      while isGood == 0 and count < 3:
        landmarks = face_detector(img)
        expand = 1.35 - 0.1* count
        if i == 1 or i == 3:
          face = align_and_crop_face(img, landmarks[0], expand=1.1, output_size = 512)
        else:
          face = align_and_crop_face(img, landmarks[0], expand=expand, output_size = 512)

        model = listModel[req.referenceImg]

        out = face2paint(model, face)
        out.save("out.jpg", "JPEG", quality=95)
        face.save("face.jpg", "JPEG", quality=95)
        output = subprocess.check_output(["python", "/content/drive/MyDrive/SSIM/__main__.py", "face.jpg", "out.jpg"])
        # filePath = req.sourceImg.replace(".jpg", "model" + str(req.model_id) + ".jpg").replace("user", "anigan")
        filePath = req.sourceImg.replace(".jpg", "model" + str(req.referenceImg) + ".jpg").replace("user", "anigan")
        result = output.decode("utf-8")
        if float(result) > 0.6:
          isGood = 1
        else:
          count += 1

      out.save(filePath)
      break

  print(filePath)
  return filePath

@app.post("/upload/")
async def upload_file(file: UploadFile = File(...)):
    with open(file.filename, "wb") as f:
        f.write(await file.read())
    return {"filename": file.filename}

# Define a route to serve the file
@app.post("/download")
async def download_file(req: DownloadRequest):
    # Assuming your file is stored in the current directory
    # You'll need to specify the correct path to your file
    path_to_file = f"./{req.url}"
    return FileResponse(path_to_file, media_type='application/octet-stream', filename=req.url)


# Commented out IPython magic to ensure Python compatibility.
# %cd \content

nest_asyncio.apply()
uvicorn.run(app, port=8000)